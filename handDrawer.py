#%% Imports

import os
import random
import numpy as np
from PIL import Image #pip install pillow


#%% Fixed global variables and definitions

# 'C' are clubs, 'D' are diamonds, 'H' are hearts, 'S' are spades
Suit_list = ['C', 'D', 'H', 'S']
# Numeric corresponds to rank with 'T' for 10, 'J' for Jack, 'Q' for Queen, 'K' for King, and 'A' for Ace
Value_list = ['2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K', 'A']

# Making a deck using lists instead of new class functions
deck = [[v + s] for s in Suit_list for v in Value_list]

#%% Functions used in main program
def draw_a_hand(number = 5):
    '''This function draws a random sample of 5 cards from the defined deck; each sample is unique
    and selected at random'''
    random_hand = random.sample(deck, number)
    return np.array(random_hand).flatten()

def make_poker_hand_images(hand, image_path, cards_path = 'cards/', separated=True):
    '''This function calls the stored card image associated with each file.  It then extracts their data
    including dimensions and coloring (e.g. RGB, CYMK, etc), stitches them together, and displays the new
    image.  By changing the directories and image names, one can stitch any images together'''

    #Separate hand into list of cards if it's not done yet
    if not separated:
        hand = [hand[i:i+2] for i in range(0,len(hand),2)]

    cards = []
    number = len(hand)
    for i in range(number):
        # This calls the png file associated with each card the player draws
       card_file = (str(hand[i]) + '.png') 
       # This employs the package 'pillow' to read the images to later extract data
       cards.append(Image.open(cards_path + card_file))

    (width, height) = cards[0].size

    # This function defines the new composite image size 
    result_width = number*width
    result_height = height

    # The final hand image is a new photo generated by stitching the card files at the appropriate locations within a 2D box (the new box is a result of the combination of widths)
    hand = Image.new('RGBA', (result_width, result_height), (255, 0, 0, 0))
    for i, card in enumerate(cards):
        hand.paste(card, (i*width, 0), card)

    # Function to save the newly made image.
    hand.save(image_path)
    return image_path
